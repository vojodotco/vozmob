<?php
/**
 * @file
 * This is the main module file for mail2og..
 *
 * This allows members to have emails routed to the proper organic group
 * based on the To header of the email. It works by using Mailhandler to deal
 * with creating nodes from emails and creating a CCK field type is used
 * used to route the email into the proper group.
 */

//==========================================//
// DRUPAL HOOKS
//==========================================//

/**
 * Implementation of hook_menu()
 */
function mail2og_menu() {
  $items = array();
  $items['admin/og/mail2og'] = array(
    'title' => 'Mail to OG',
    'description' => 'Configure a gateway for email to og posts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mail2og_administration_form'),
    'access arguments' => array('administer mail2og'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm
 */
function mail2og_perm() {
  return array('administer mail2og', 'send to group');
}

/**
 * Implementation of hook_block
 */
function mail2og_block($op, $delta = '', $edit = array()) {
  switch ($op) {
    case 'list':
      return array('mail2og_block_info' => array(
        'info' => t('Email information for Mail2og')),
      );
      break;
    case 'view':
      return $delta();
      break;
  }
}

/**
 * Implemntation of hook_nodeapi()
 * @NOTE I am not sure that this is really the way to do this. It seems like
 *       this function should be able to be done through CCK's token
 *       implementation, however, we need the full node object to do the
 *       correct replacement, so we do this durring the presave process
 */
function mail2og_nodeapi(&$node, $op, $a3, $a4) {
  switch ($op) {
    case 'presave':
      if (module_exists('token')) {
        foreach (mail2og_fields() as $field) {
          $text = token_replace($node->{$field['field_name']}[0]['value'], 'mail2og', $node);
          $node->{$field['field_name']}[0]['value'] = $text;
        }
      }
    break;
  }
}

/**
 * Implementation of hook_theme
 */
function mail2og_theme($existing, $type, $theme, $path) {
  return array(
    'mail2og_block_display_email_info' => array(
      'arguments' => array(
        'group' => NULL,
        'emails' => NULL,
      ),
    ),
    'mail2og_field' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('mail2og_emailfield_process'),
      '#autocomplete_path' => FALSE,
    ),
    'mail2og_emailfield' => array(
      'arguments' => array('element' => NULL),
    ),
    'mail2og_emailfield_formatter' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function mail2og_elements() {
  return array(
    'mail2og_emailfield' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('mail2og_emailfield_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

//==========================================//
// INTERNAL FUNCTIONS
//==========================================//

/**
 * Helper function to find all the mail2og CCK fields
 * 
 * This function now uses variable_get to bypass the the calculations. It should
 * reset automatically when a new field is added. If it doesn't update, reset it
 * by calling mail2og_fields(TRUE).
 *
 * @param $reset
 *   boolean, whether to run reset the mail2og_fields variable
 * @return
 *   array, all mail2og fields found
 */
function mail2og_fields($reset = FALSE) {
  if (module_exists('content')) {
    // Grab directly from variable if possible (3500% faster in my tests)
    if ($reset || (!$return = variable_get('mail2og_fields', FALSE))) {
      $return = array();
      $fields = content_types($node->type);
      foreach($fields as $content_type) {
        if ($content_type['fields']) {
          foreach ($content_type['fields'] as $field_name => $field) {
            if ($field['type'] == 'mail2og_emailfield') {
              $return[$field_name] = $field;
            }
          }
        }
      }
      variable_set('mail2og_fields', $return);
    }
    return $return;
  }
}

/**
 * Resets the mail2og_fields variable whenever a CCK field is added. This is
 * here in case someone adds a second mail2og field type. I don't know exactly
 * why someone would do that, but it's possible so this is here.
 */
function mail2og_form_content_field_edit_form_alter(&$form, &$form_state) {
  $form['submit']['#submit'][] = 'mail2og_fields_reset';
}

/**
 * Wrapper around mail2og_fields written for the content_field_edit_form submit
 */
function mail2og_fields_reset() {
  mail2og_fields(TRUE);
}

/**
 * Helper function to find an email address mailbox in a cck field
 * @param $email
 *   string, email address mailbox to search for
 * @param $cck_field
 *   array, cck field
 * @return
 *   object, node object of group w/email address
 */
function mail2og_find_email_address($email, $cck_field = NULL) {
  if (!$cck_field) {
    $fields = mail2og_fields();
  }
  else {
    $fields = array($cck_field);
  }

  // Get each of the fields that match our criteria
  foreach ($fields as $field) {
    // Get the relevant database information for this field
    $db_info = content_database_info($field);
    // Look for this email address in the correct col
    $result = db_result(db_query('SELECT field.nid FROM %s field WHERE %s = "%s"',
      $db_info['table'], $db_info['columns']['value']['column'], $email
    ));
    if ($result) {
      return node_load($result);
    }
  }
}

/**
 * Helper function to find the 
 * @return
 *   string, domain name to use for email addresses
 */
function mail2og_domain() {
  if (!$domain = variable_get('mail2og_default_email_domain', FALSE)) {
    preg_match("/^.*@(.*)$/", $box->settings['mail'], $matches);
    if (!$domain = $matches[1]) {
      $domain = NULL;
    }
  }
  return $domain;
}

/**
 * Admin settings for mail2og
 */
function mail2og_administration_form() {
  // Select the groups to enable
  $form['mail2og_enabled_groups'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Enable mail2og on'),
    '#options' =>  array(0 => t('No groups'), 1 => t('All groups')) + og_all_groups_options(),
    '#default_value' => variable_get('mail2og_enabled_groups', 0),
    '#description' => t('Select the groups you want to enable mail2og on. Default is all')
  );
  // Require posts to be associated with a group
  $form['mail2og_require_group'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ignore posts not associated with a group.'),
    '#default_value' => variable_get('mail2og_require_group', FALSE),
    '#description' => t('Check this box if you would like to ignore posts sent to an email that does not match an enabled group.')
  );
  
  // Choose public settings
  $form['mail2og_default_public'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make posts created by mail2og public'),
    '#default_value' => variable_get('mail2og_default_public', FALSE),
    '#description' => t('Check this box if you want posts created by mail2og to be viewable outside of the group it was posted in. Leave unchecked if you want them to be viewable only in the group(s) it was posted in. Note: The OG access configurations settings override this. Allow users to choose post visibility if you wish to use this option.')
  );
  // set the default content type. Check the kind of OG content types that are
  // enabled
  if ($og_types = og_get_types('group_post')) {
    $og_types = array_combine(array_values($og_types), array_values($og_types));
    $form['mail2og_default_node_type'] = array(
      '#type' => 'select',
      '#title' => t('Default content post type'),
      '#options' => $og_types,
      '#default_value' => variable_get('mail2og_default_node_type', 0),
      '#description' => t('Select default content type for submissions. Default will use the content type defined by mailhandler.')
    );
  }

  // get a list of the mailboxes that are enabled on the system
  $result = db_query('SELECT * FROM {mailhandler} ORDER BY mail');
  $options = array(0 => t('Choose a mailbox'));
  while ($mailbox = db_fetch_object($result)) {
    $options[$mailbox->mid] = $mailbox->mail;
    $boxes_exist = true;
  }
  // ensure that we have mailboxes
  if (!$boxes_exist) {
    drupal_set_message(t('There are no Mailhandler mailboxes configured. Please !configure one before setting up mail2og.',
      array('!configure' => l(t('configure'), 'admin/content/mailhandler')))
    );
  }
  else {
    $form['mail2og_mailbox_setting'] = array(
      '#type' => 'select',
      '#title' => t('Mailbox for retriving group email'),
      '#options' => $options,
      '#default_value' => variable_get('mail2og_mailbox_setting', null),
      '#description' => t('Select the mailhandler mailbox you wish to use to retrive group emails'),
    );
  }

  // if we have a mailbox set, load it so we can get the domain
  if ($mid = variable_get('mail2og_mailbox_setting', null)) {
    $box = mailhandler_get_mailbox($mid);
    //print_R($box);
  }

  $form['mail2og_default_email_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Default email address domain'),
    '#default_value' => mail2og_domain(),
    '#description' => t('This sets the default email address domain that users will send their posts to. This will automatically be set based on the mailbox you choose, or you can set it by hand here. This should be something like: example.com'),
  );

  $form['#submit'][] = 'mail2og_default_mailbox_domain_submit';
  return system_settings_form($form);
}

/**
 * Sets the default mail domain for admin/settings/mail2og if it was not set
 */
function mail2og_default_mailbox_domain_submit($form, $form_state) {
  // if the default email domain was not set and the mailhandler mailbox setting was,
  // use the mailhandler data to populate this field
  if (!$form_state['values']['mail2og_default_email_domain'] && $form_state['values']['mail2og_mailbox_setting']) {
    $mailbox = mailhandler_get_mailbox($form_state['values']['mail2og_mailbox_setting']);
    variable_set('mail2og_default_email_domain', $mailbox['domain']);
  }
}

/**
 * Block to display on group pages
 * @return string
 */
function mail2og_block_info() {
  // Is this user allowed to post?
  if (!user_access('send to group')) {
    return;
  }

  // Make sure we are on a group page
  if (!$group = og_determine_context()) {
    return;
  }

  $fields = mail2og_fields();

  $emails = array();
  foreach ($fields as $field) {
    $field_name = $field['field_name'];
    foreach ($group->$field_name as $email) {
      $emails[] = $email['value'];
    }
  }

  // Nothing to see here
  if (empty($emails)) {
    return;
  }

  // @TODO make sure that this user has rights to
  // post to this specific group

  return array(
    'subject' => t('Post by email'),
    'content' => theme('mail2og_block_display_email_info', $group, $emails)
  );
}

/**
 * Helper function to clean the group title of non-alpha characters
 * @param $title
 * @return string
 */
function mail2og_email_to_address_create($title) {
  // @TODO support other kinds of replacement here
  // take the incoming title and swap all non-alpha characters
  return strtolower(preg_replace("/[^a-zA-Z0-9]/", "_", $title));
}

//==========================================//
// CCK FUNCTIONS
//==========================================//

/**
 * Implementation of hook_field_info().
 */
function mail2og_field_info() {
  return array(
    'mail2og_emailfield' => array(
      'label' => t('Email to OG'),
      'description' => t('Connect an organic group to email.'),
      'content_icon' => 'icon_content_text.png',
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_CUSTOM,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function mail2og_field_settings($op, &$field) {
  switch ($op) {
    case 'save':
      return array('mail2og_emailfield_process');

    case 'database columns':
      $columns['value'] = array(
        'type' => 'text',
        'size' => 'medium',
        'not NULL' => FALSE,
        'sortable' => TRUE,
        'views' => TRUE
      );
      return $columns;

    case 'views data':
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_value'];
      // Make changes to $data as needed here.
      return $data;
  }
}

/**
 * Implementation of hook_field().
 */
function mail2og_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['value'])) {
            // Make sure field is an email address
            if (!valid_email_address($item['value'])) {
              form_set_error($error_element, t('%name: not a valid email address.',
                array('%name' => t($field['widget']['label'])))
              );
            }
          }
        }
      }
      return $items;

    // Sanitized data before it is displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $text = check_plain($item['value']);
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function mail2og_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function mail2og_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('mail2og_emailfield'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function mail2og_widget_info() {
  return array(
    'mail2og_emailfield' => array(
      'label' => t('Connect Email to OG'),
      'field types' => array('mail2og_emailfield'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function mail2og_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function mail2og_emailfield_process($element, $edit, $form_state, $form) {
  $field_key = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#attributes' => array('class' => 'mail2og_emailfield'),
    '#element_validate' => array('mail2og_cck_widget_validate'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}

/**
 * mail2og cck widget validator
 * This actually does value replacement as well in order to make sure that a user
 * gets good data into the email field
 * @param $element
 * @param $form_state
 * @return unknown_type
 */
function mail2og_cck_widget_validate($element, &$form_state) {
  // Get the field name so we can check the form_state values for it and validate
  if (!$email = $form_state['values'][$element['#field_name']][$element['#delta']]['value']) {
    // No email address, build the email address from the node title
    $to = mail2og_email_to_address_create($form_state['values']['title']);
    // Get the default domain
    $domain = mail2og_domain();
    // Create the email address
    $form_state['values'][$element['#field_name']][$element['#delta']]['value'] = "$to@$domain";
    drupal_set_message(t('Automatically generated a email address: !address for this group.',
      array('!address' => "$to@$domain")
    ));
  }
  // There is incoming data, we need to see if we can validate it  
  else {
  	// Was the entered text a valid email address?
    if (!valid_email_address($email)) {
    	// Now we try to create a valid email address with the domain 
    	$email = $email.'@'. mail2og_domain();
    	if (!valid_email_address($email)) {
        form_error($element, t('The email address you entered is not valid, please try again.'));
    	}
    	// Now we just need to update the field with the new value
    	$form_state['values'][$element['#field_name']][0]['value'] = $email;
    }      
  }    
}

//==========================================//
// THEME FUNCTIONS
//==========================================//

/**
 * Theme function for 'default' text field formatter.
 */
function theme_mail2og_formatter_default($element) {
  return $element['#item']['safe'];
}

/**
 * FAPI theme for an individual text elements.
 *
 * The textfield or textarea is already rendered by the
 * textfield or textarea themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_mail2og_emailfield($element) {
  return $element['#children'];
}

/**
 * Displays the group email info
 * @param $group
 * @param $email
 * @return string
 */
function theme_mail2og_block_display_email_info($group, $emails) {
  $html = array();
  if (count($emails) == 1) {
    $html[] = t('You can post to this group by sending an email to %email', array('%email' => $emails[0]));
  }
  else {
    $html[] = t('You can post to this group by sending an email to:');
    foreach ($emails as $email) {
      $html[] = $email;
    }
  }
  return implode('<br/>', $html);
}

//==========================================//
// OTHER HOOKS
//==========================================//

/**
 * Implementation of hook_token_list() 
 */
function mail2og_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();

    $tokens['mail2og']['raw']       = t('Raw, unfiltered text');
    $tokens['mail2og']['formatted'] = t('Formatted and filtered text');

    return $tokens;
  }
}

/**
 * Implementation of hook_token_values()
 */
function mail2og_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = $object[0];

    $tokens['raw']  = $item['value'];
    $tokens['formatted'] = isset($item['view']) ? $item['view'] : '';
    return $tokens;
  }
}

/**
 * Implementation of hook_mailhandler()
 * Check incoming mail to see if it needs to be associated with a
 * group. This uses the to address (to@domain.com)
 */
function mail2og_mailhandler(&$node, $result, $i, $header, $mailbox) {
 
  if ($header->to[0]->host=='vozmob.net') {
     $header->to[0]->host='vojo.co';
  }

  // Set $email var with the address this node was sent to
  $email = $header->to[0]->mailbox . '@' . $header->to[0]->host;

  // Check if mailcomment exists
  if (module_exists('mailcomment')) {
    $mailcomment_mailboxes = variable_get('mailcomment_mailboxes', '');
    $mailbox_list = mailcomment_mailbox_list();

    // Check whether the email matches any of the mailcomment mailboxes.
    foreach ($mailcomment_mailboxes as $key) {
      if ($email == $mailbox_list[$key]) {
        // Return the unmodified email so that mailcomment can use it.
        return $node;
      }
    }
  }

  // If no groups are enabled, exit
  if (in_array(0, variable_get('mail2og_enabled_groups', array()))) {
    if (variable_get('mail2og_require_group')) {
      return;
    } else {
      return $node;
    }
  }

  // now we need to look for the emailbox name to see if it belongs to a group
  if (!$group = mail2og_find_email_address($email) ) {
    if (variable_get('mail2og_require_group')) {
      return;
    } else {
      return $node;
    }
  }

  // Now check to see if this group is enabled, or if all groups are allowed
  $enabled_groups = variable_get('mail2og_enabled_groups', array());
  if (!in_array($group->nid, $enabled_groups) && !isset($enabled_groups[1]) ) {
    if (variable_get('mail2og_require_group')) {
      return;
    } else {
      return $node;
    }
  }

  // Get the full user object. We need to make sure this user is a member
  // @TODO This should hook into OG's check if a user can post to a group
  $user = user_load($node->uid);
  if (! $user->og_groups[$group->nid]) {
    $params = og_subscribe_user($group->nid, $user);
    if ($params['type'] != 'subscribed') {
      watchdog('mail2og', 'User !user attempted to post to !group that they are not a member of.',
        array(
          '!user' => l($user->name, 'user/' . $user->uid),
          '!group' => l($group->title, 'node/' . $group->nid)
        ),
        'warning');
      return $node;
    }
    
  }
  // Is this user in this group and can they send to it?
  if (!user_access('send to group')) {
    watchdog('mail2og', 'User !user did not have sufficient permissions to post via email',
      array(
        '!user' => l($user->name, 'user/'. $user->uid)
      ),
      'warning');
    if (variable_get('mail2og_require_group')) {
      return;
    } else {
      return $node;
    }
  }

  // Check for content type permission
  $content_type = variable_get('mail2og_default_node_type', FALSE);
  // We check both node_access() and user_access() because CCK-defined types do not fully
  // support node_access('create'). http://drupal.org/node/965200
  if (! node_access('create', $node, $user) && ! user_access("create $content_type content", $user)) {
    watchdog('mail2og', 'User !user did not have sufficient permissions to create !content content',
      array(
        '!user' => l($user->name, 'user/'. $user->uid),
        '!content' => $content_type,
      ),
      'warning');
    if (variable_get('mail2og_require_group')) {
      return;
    } else {
      return $node;
    }
  }

  // Set the content type
  $node->type = $content_type;
  // Add the group id to this node
  $node->og_groups[$group->nid] = $group->nid;

  // Set the public/private flag
  $node->og_public = variable_get('mail2og_default_public', FALSE);

  // return the modified node
  return $node;
}
